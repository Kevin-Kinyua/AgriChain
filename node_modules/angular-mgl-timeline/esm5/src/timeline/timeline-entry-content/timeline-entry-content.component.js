/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AnimationBuilder, style, animate } from '@angular/animations';
import { Component, EventEmitter, ElementRef, Renderer, ViewEncapsulation } from '@angular/core';
var MglTimelineEntryContentComponent = /** @class */ (function () {
    function MglTimelineEntryContentComponent(elementRef, animationBuilder, renderer) {
        this.elementRef = elementRef;
        this.animationBuilder = animationBuilder;
        this.renderer = renderer;
        this.animationDone = new EventEmitter();
        this._expanded = false;
    }
    Object.defineProperty(MglTimelineEntryContentComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            this.contentHeight = this.elementRef.nativeElement.scrollHeight;
            /** @type {?} */
            var animate = this._expanded !== expanded;
            this._expanded = expanded;
            animate ? this.animate() : this.setStyle;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.contentHeight = this.elementRef.nativeElement.scrollHeight;
        this.setStyle();
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.getCollapsedStyle = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            height: '0px'
        };
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.getExpandedStyle = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            height: this.contentHeight + 'px'
        };
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.animate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expanded) {
            /** @type {?} */
            var animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate('100ms ease', style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            animation.play();
        }
        else {
            this.animationBuilder;
            /** @type {?} */
            var animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate('200ms ease', style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            animation.play();
        }
    };
    /**
     * @return {?}
     */
    MglTimelineEntryContentComponent.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setElementStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    MglTimelineEntryContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-content',
                    template: "<div><ng-content></ng-content></div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["mgl-timeline-entry-content{position:relative;display:block;overflow:hidden}mgl-timeline-entry-content>div{padding:10px}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryContentComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: AnimationBuilder },
        { type: Renderer }
    ]; };
    return MglTimelineEntryContentComponent;
}());
export { MglTimelineEntryContentComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryContentComponent.prototype.contentHeight;
    /** @type {?} */
    MglTimelineEntryContentComponent.prototype.animationDone;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryContentComponent.prototype._expanded;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryContentComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryContentComponent.prototype.animationBuilder;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryContentComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnktY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW1nbC10aW1lbGluZS8iLCJzb3VyY2VzIjpbInNyYy90aW1lbGluZS90aW1lbGluZS1lbnRyeS1jb250ZW50L3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBaUIsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhIO0lBd0JFLDBDQUFvQixVQUFzQixFQUFVLGdCQUFrQyxFQUFVLFFBQWtCO1FBQTlGLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQWZsSCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFaEMsY0FBUyxHQUFZLEtBQUssQ0FBQztJQWFtRixDQUFDO0lBWHZILHNCQUFJLHNEQUFROzs7O1FBT1o7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7Ozs7UUFURCxVQUFhLFFBQWlCO1lBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDOztnQkFDMUQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUTtZQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUMxQixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUMxQyxDQUFDOzs7T0FBQTs7OztJ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dGlvbkJ1aWxkZXIsIHN0eWxlLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21nbC10aW1lbGluZS1lbnRyeS1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90aW1lbGluZS1lbnRyeS1jb250ZW50LmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTWdsVGltZWxpbmVFbnRyeUNvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBwcml2YXRlIGNvbnRlbnRIZWlnaHQ7XG4gIGFuaW1hdGlvbkRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwcml2YXRlIF9leHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHNldCBleHBhbmRlZChleHBhbmRlZDogYm9vbGVhbikge1xuICAgIHRoaXMuY29udGVudEhlaWdodCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICBjb25zdCBhbmltYXRlID0gdGhpcy5fZXhwYW5kZWQgIT09IGV4cGFuZGVkO1xuICAgIHRoaXMuX2V4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgYW5pbWF0ZSA/IHRoaXMuYW5pbWF0ZSgpIDogdGhpcy5zZXRTdHlsZVxuICB9XG5cbiAgZ2V0IGV4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBhbmRlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBhbmltYXRpb25CdWlsZGVyOiBBbmltYXRpb25CdWlsZGVyLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udGVudEhlaWdodCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICB0aGlzLnNldFN0eWxlKCk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbGxhcHNlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6ICcwcHgnXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBhbmRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IHRoaXMuY29udGVudEhlaWdodCArICdweCdcbiAgICB9XG4gIH1cblxuICBhbmltYXRlKCkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICBjb25zdCBhbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgICAgLmJ1aWxkKFtcbiAgICAgICAgICBzdHlsZSh0aGlzLmdldENvbGxhcHNlZFN0eWxlKCkpLFxuICAgICAgICAgIGFuaW1hdGUoJzEwMG1zIGVhc2UnLCBzdHlsZSh0aGlzLmdldEV4cGFuZGVkU3R5bGUoKSkpLFxuICAgICAgICBdKVxuICAgICAgICAuY3JlYXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KVxuICAgICAgYW5pbWF0aW9uLm9uRG9uZSgoKSA9PiB0aGlzLmFuaW1hdGlvbkRvbmUuZW1pdCh7IHRvU3RhdGU6ICdleHBhbmRlZCcgfSkpO1xuICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uQnVpbGRlclxuICAgICAgICAuYnVpbGQoW1xuICAgICAgICAgIHN0eWxlKHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpKSxcbiAgICAgICAgICBhbmltYXRlKCcyMDBtcyBlYXNlJywgc3R5bGUodGhpcy5nZXRDb2xsYXBzZWRTdHlsZSgpKSksXG4gICAgICAgIF0pXG4gICAgICAgIC5jcmVhdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpXG4gICAgICBhbmltYXRpb24ub25Eb25lKCgpID0+IHRoaXMuYW5pbWF0aW9uRG9uZS5lbWl0KHsgdG9TdGF0ZTogJ2NvbGxhcHNlZCcgfSkpO1xuICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBzZXRTdHlsZSgpIHtcbiAgICBjb25zdCBiYXNlU3R5bGUgPSB0aGlzLmV4cGFuZGVkID8gdGhpcy5nZXRFeHBhbmRlZFN0eWxlKCkgOiB0aGlzLmdldENvbGxhcHNlZFN0eWxlKCk7XG4gICAgT2JqZWN0LmtleXMoYmFzZVN0eWxlKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgYmFzZVN0eWxlW3Byb3BlcnR5XSlcbiAgICB9KVxuICB9XG5cbn1cbiJdfQ==
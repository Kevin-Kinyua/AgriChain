/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HostBinding, ViewEncapsulation } from '@angular/core';
import { MglTimelineEntrySideComponent } from './../timeline-entry-side/timeline-entry-side.component';
import { MglTimelineEntryDotComponent } from './../timeline-entry-dot/timeline-entry-dot.component';
import { Component, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';
import { MglTimelineEntryContentComponent } from '../timeline-entry-content/timeline-entry-content.component';
import { MglTimelineEntryHeaderComponent } from '../timeline-entry-header/timeline-entry-header.component';
var MglTimelineEntryComponent = /** @class */ (function () {
    function MglTimelineEntryComponent(elementRef) {
        this.elementRef = elementRef;
        this.subscriptions = [];
        this.focusOnOpen = false;
        this._mobile = false;
        this.changed = new EventEmitter();
        this.animationDone = new EventEmitter();
    }
    Object.defineProperty(MglTimelineEntryComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dot ? (this.dot.expanded && this.content.expanded) : this.content.expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            if (this.dot && expanded) {
                this.dot.expanded = expanded;
            }
            else {
                this.content.expanded = expanded;
            }
            this.changed.emit(expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryComponent.prototype, "mobile", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('mobile', value);
            if (this.dot) {
                this.dot.mobile = value;
            }
            if (this.side) {
                this.side.mobile = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dot) {
            this.subscriptions.push(this.dot.animationDone.subscribe(function (event) {
                if (event.toState === 'expanded') {
                    _this.content.expanded = true;
                }
                else {
                    _this.animationDone.emit(event);
                }
            }));
        }
        if (this.content) {
            this.subscriptions.push(this.content.animationDone.subscribe(function (event) {
                if (_this.dot && event.toState === 'collapsed') {
                    _this.dot.expanded = false;
                }
                else {
                    if (_this.focusOnOpen) {
                        _this.elementRef.nativeElement.scrollIntoView({ behavior: 'smooth' });
                    }
                    _this.animationDone.emit(event);
                }
            }));
        }
    };
    Object.defineProperty(MglTimelineEntryComponent.prototype, "alternate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('alternate', value);
            if (this.dot) {
                this.dot.alternate = value;
            }
            if (this.side) {
                this.side.alternate = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.collapse = /**
     * @return {?}
     */
    function () {
        this.expanded = false;
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.expand = /**
     * @return {?}
     */
    function () {
        this.expanded = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.toggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var headerFound = this.containsInPath(event, 'mgl-timeline-entry-header');
        /** @type {?} */
        var dotFound = this.containsInPath(event, 'mgl-timeline-entry-dot');
        if (headerFound || dotFound) {
            this.expanded = !this.expanded;
        }
    };
    /**
     * @private
     * @param {?} mouseEvent
     * @param {?} name
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.containsInPath = /**
     * @private
     * @param {?} mouseEvent
     * @param {?} name
     * @return {?}
     */
    function (mouseEvent, name) {
        /** @type {?} */
        var currentElem = (/** @type {?} */ (mouseEvent.target));
        while (currentElem) {
            if (currentElem.localName === name) {
                return true;
            }
            currentElem = currentElem.parentElement;
        }
        return false;
    };
    MglTimelineEntryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry',
                    template: "<ng-content select=\"mgl-timeline-entry-side\"></ng-content>\n<div class=\"mgl-timeline-entry-card\">\n  <div class=\"mgl-timeline-entry-card-header\" (click)=\"toggle($event)\">\n    <ng-content select=\"mgl-timeline-entry-dot\"></ng-content>\n    <ng-content select=\"mgl-timeline-entry-header\"></ng-content>\n  </div>\n  <ng-content select=\"mgl-timeline-entry-content\"></ng-content>\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["mgl-timeline-entry{display:block;position:relative;margin-bottom:50px;width:calc(50% - 5px)}mgl-timeline-entry.alternate{margin-left:calc(50% + 5px)}mgl-timeline-entry.mobile{width:calc(100% - 30px);margin-left:30px}mgl-timeline-entry .mgl-timeline-entry-card{background-color:#f0f0f0}mgl-timeline-entry .mgl-timeline-entry-card .mgl-timeline-entry-card-header{position:relative;background-color:#e6e6e6}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MglTimelineEntryComponent.propDecorators = {
        expanded: [{ type: HostBinding, args: ['class.expanded',] }],
        changed: [{ type: Output, args: ['expand',] }],
        animationDone: [{ type: Output }],
        content: [{ type: ContentChild, args: [MglTimelineEntryContentComponent,] }],
        header: [{ type: ContentChild, args: [MglTimelineEntryHeaderComponent,] }],
        dot: [{ type: ContentChild, args: [MglTimelineEntryDotComponent,] }],
        side: [{ type: ContentChild, args: [MglTimelineEntrySideComponent,] }]
    };
    return MglTimelineEntryComponent;
}());
export { MglTimelineEntryComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryComponent.prototype.subscriptions;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.focusOnOpen;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryComponent.prototype._mobile;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.changed;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.animationDone;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.content;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.header;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.dot;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.side;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { QueryList, ElementRef, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { MglTimelineEntryComponent } from './../timeline-entry/timeline-entry.component';
import { Component, Input, ContentChildren, HostListener } from '@angular/core';
var MglTimelineComponent = /** @class */ (function () {
    function MglTimelineComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.toggle = true;
        this.mobileWidthThreshold = 640;
        this.alternate = true;
        this.side = 'left';
        this._focusOnOpen = false;
        this.subscriptions = [];
    }
    Object.defineProperty(MglTimelineComponent.prototype, "mobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement.classList.contains('mobile');
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.content && this.content.forEach(function (entry) { return entry.mobile = value; });
            this.elementRef.nativeElement.classList.toggle('mobile', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineComponent.prototype, "focusOnOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focusOnOpen;
        },
        set: /**
         * @param {?} focusOnOpen
         * @return {?}
         */
        function (focusOnOpen) {
            this.content && this.content.forEach(function (entry) { return entry.focusOnOpen = focusOnOpen; });
            this._focusOnOpen = focusOnOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} simpleChanges
     * @return {?}
     */
    MglTimelineComponent.prototype.ngOnChanges = /**
     * @param {?} simpleChanges
     * @return {?}
     */
    function (simpleChanges) {
        this.updateContent();
    };
    /**
     * @return {?}
     */
    MglTimelineComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    MglTimelineComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.mobile = this.elementRef.nativeElement.clientWidth < this.mobileWidthThreshold;
        setTimeout(function () { return _this.updateContent(); });
        this.content.changes.subscribe(function (changes) {
            _this.updateContent();
        });
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineComponent.prototype.updateContent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngOnDestroy();
        if (this.content) {
            this.content.forEach(function (entry, index) {
                if (_this.toggle) {
                    _this.subscriptions.push(entry.changed.subscribe(function (state) {
                        if (state === true) {
                            _this.content.filter(function (e) { return e !== entry; }).forEach(function (e) { return e.collapse(); });
                        }
                    }));
                }
                entry.alternate = _this.alternate ? (index % 2 !== 0) : (_this.side === 'right');
                entry.mobile = _this.mobile;
                entry.focusOnOpen = _this.focusOnOpen;
            });
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    MglTimelineComponent.prototype.onResize = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        console.log(this.mobileWidthThreshold);
        this.mobile = this.elementRef.nativeElement.clientWidth < this.mobileWidthThreshold;
    };
    MglTimelineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline',
                    template: "<div class=\"mgl-timeline-line\"></div>\n<ng-content></ng-content>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["mgl-timeline{position:relative;display:block;padding:50px 0}mgl-timeline .mgl-timeline-line{position:absolute;top:0;height:100%;background-color:#a0a0a0;left:50%;width:10px;-webkit-transform:translateX(-50%);transform:translateX(-50%)}mgl-timeline.mobile .mgl-timeline-line{left:20px;-webkit-transform:none;transform:none}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    MglTimelineComponent.propDecorators = {
        toggle: [{ type: Input }],
        mobileWidthThreshold: [{ type: Input }],
        alternate: [{ type: Input }],
        side: [{ type: Input }],
        focusOnOpen: [{ type: Input }],
        content: [{ type: ContentChildren, args: [MglTimelineEntryComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return MglTimelineComponent;
}());
export { MglTimelineComponent };
if (false) {
    /** @type {?} */
    MglTimelineComponent.prototype.toggle;
    /** @type {?} */
    MglTimelineComponent.prototype.mobileWidthThreshold;
    /** @type {?} */
    MglTimelineComponent.prototype.alternate;
    /** @type {?} */
    MglTimelineComponent.prototype.side;
    /**
     * @type {?}
     * @private
     */
    MglTimelineComponent.prototype._focusOnOpen;
    /**
     * @type {?}
     * @private
     */
    MglTimelineComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    MglTimelineComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    MglTimelineComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    MglTimelineComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, HostBinding, ElementRef, EventEmitter, Renderer, ChangeDetectorRef, Inject, ViewEncapsulation } from '@angular/core';
import { AnimationBuilder, style, animate } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
var MglTimelineEntryDotComponent = /** @class */ (function () {
    function MglTimelineEntryDotComponent(animationBuilder, elementRef, renderer, changeDetectorRef, document) {
        this.animationBuilder = animationBuilder;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this._expanded = false;
        this._alternate = false;
        this._mobile = false;
        this._size = 50;
        this.animationDone = new EventEmitter();
        this.clazz = 'primary';
    }
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} size
         * @return {?}
         */
        function (size) {
            this._size = size;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "alternate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alternate;
        },
        set: /**
         * @param {?} alternate
         * @return {?}
         */
        function (alternate) {
            this._alternate = alternate;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "mobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mobile;
        },
        set: /**
         * @param {?} mobile
         * @return {?}
         */
        function (mobile) {
            this._mobile = mobile;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            /** @type {?} */
            var animate = this._expanded !== expanded;
            this._expanded = expanded;
            animate ? this.animate() : this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialStyle = this.document.defaultView.getComputedStyle(this.elementRef.nativeElement);
        this.setStyle();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getCollapsedStyle = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            top: '50%',
            left: (this.alternate || this.mobile) ? '-5px' : 'calc(100% + 5px)',
            width: this.size + 'px',
            height: this.size + 'px',
            opacity: 1,
            transform: 'translateY(-50%) translateX(-50%)',
            boxShadow: this.initialStyle && this.initialStyle.boxShadow,
            borderRadius: '100px'
        };
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getTransitionStyle = /**
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.getCollapsedStyle(), { left: '50%', opacity: 0.5, boxShadow: 'none' });
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getExpandedStyle = /**
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.getTransitionStyle(), { left: '0', transform: 'translateX(0) translateY(-50%)', width: '100%', height: '100%', opacity: 1, borderRadius: 0 });
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.animate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        if (this.expanded) {
            this.animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate('200ms ease', style(this.getTransitionStyle())),
                animate('200ms ease', style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            this.animation.play();
        }
        else {
            this.animationBuilder;
            this.animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate('100ms ease', style(this.getTransitionStyle())),
                animate('100ms ease', style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            this.animation.play();
        }
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.setStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        /** @type {?} */
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setElementStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    /**
     * @private
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.destroyAnimation = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.animation) {
            this.animation.destroy();
            delete this.animation;
        }
    };
    MglTimelineEntryDotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-dot',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["mgl-timeline-entry-dot{display:block;position:absolute}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryDotComponent.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: Renderer },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    MglTimelineEntryDotComponent.propDecorators = {
        clazz: [{ type: Input, args: ['class',] }, { type: HostBinding, args: ['class',] }],
        size: [{ type: Input }]
    };
    return MglTimelineEntryDotComponent;
}());
export { MglTimelineEntryDotComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype._expanded;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype._alternate;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype._mobile;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.initialStyle;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.animation;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.animationDone;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.clazz;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.animationBuilder;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    MglTimelineEntryDotComponent.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnktZG90LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbWdsLXRpbWVsaW5lLyIsInNvdXJjZXMiOlsic3JjL3RpbWVsaW5lL3RpbWVsaW5lLWVudHJ5LWRvdC90aW1lbGluZS1lbnRyeS1kb3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQ3hDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQ3RFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDO0lBMkRFLHNDQUFvQixnQkFBa0MsRUFBVSxVQUFzQixFQUM5RSxRQUFrQixFQUFVLGlCQUFvQyxFQUM5QyxRQUFRO1FBRmQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDOUUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDOUMsYUFBUSxHQUFSLFFBQVEsQ0FBQTtRQXJEMUIsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixlQUFVLEdBQVksS0FBSyxDQUFDO1FBQzVCLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFFekIsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUczQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFJeEMsVUFBSyxHQUFHLFNBQVMsQ0FBQztJQTBDb0IsQ0FBQztJQXhDdkMsc0JBQ0ksOENBQUk7Ozs7UUFLUjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDOzs7OztR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MkI7Ozs7O0lBQzNCLGlEQUFrQjs7SUFFbEIscURBQXdDOztJQUV4Qyw2Q0FFa0I7Ozs7O0lBd0NOLHdEQUEwQzs7Ozs7SUFBRSxrREFBOEI7Ozs7O0lBQ3RGLGdEQUEwQjs7Ozs7SUFBRSx5REFBNEM7Ozs7O0lBQ3hFLGdEQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCxcbiAgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIsIENoYW5nZURldGVjdG9yUmVmLCBJbmplY3QsIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQnVpbGRlciwgc3R5bGUsIGFuaW1hdGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWdsLXRpbWVsaW5lLWVudHJ5LWRvdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90aW1lbGluZS1lbnRyeS1kb3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90aW1lbGluZS1lbnRyeS1kb3QuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBNZ2xUaW1lbGluZUVudHJ5RG90Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgcHJpdmF0ZSBfZXhwYW5kZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfYWx0ZXJuYXRlOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX21vYmlsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIGluaXRpYWxTdHlsZTtcbiAgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyID0gNTA7XG4gIHByaXZhdGUgYW5pbWF0aW9uO1xuXG4gIGFuaW1hdGlvbkRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBASW5wdXQoJ2NsYXNzJylcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGNsYXp6ID0gJ3ByaW1hcnknO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBzaXplKHNpemU6IG51bWJlcikge1xuICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgIHRoaXMuc2V0U3R5bGUoKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgc2V0IGFsdGVybmF0ZShhbHRlcm5hdGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hbHRlcm5hdGUgPSBhbHRlcm5hdGU7XG4gICAgdGhpcy5zZXRTdHlsZSgpO1xuICB9XG5cbiAgZ2V0IGFsdGVybmF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWx0ZXJuYXRlO1xuICB9XG5cbiAgc2V0IG1vYmlsZShtb2JpbGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9tb2JpbGUgPSBtb2JpbGU7XG4gICAgdGhpcy5zZXRTdHlsZSgpO1xuICB9XG5cbiAgZ2V0IG1vYmlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9iaWxlO1xuICB9XG5cbiAgc2V0IGV4cGFuZGVkKGV4cGFuZGVkOiBib29sZWFuKSB7XG4gICAgY29uc3QgYW5pbWF0ZSA9IHRoaXMuX2V4cGFuZGVkICE9PSBleHBhbmRlZDtcbiAgICB0aGlzLl9leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgIGFuaW1hdGUgPyB0aGlzLmFuaW1hdGUoKSA6IHRoaXMuc2V0U3R5bGUoKVxuICB9XG5cbiAgZ2V0IGV4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBhbmRlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5pbWF0aW9uQnVpbGRlcjogQW5pbWF0aW9uQnVpbGRlciwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBcbiAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIsIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50KSB7IH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0aWFsU3R5bGUgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHRoaXMuc2V0U3R5bGUoKTtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29sbGFwc2VkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICBsZWZ0OiAodGhpcy5hbHRlcm5hdGUgfHwgdGhpcy5tb2JpbGUpID8gJy01cHgnIDogJ2NhbGMoMTAwJSArIDVweCknLFxuICAgICAgd2lkdGg6IHRoaXMuc2l6ZSArICdweCcsXG4gICAgICBoZWlnaHQ6IHRoaXMuc2l6ZSArICdweCcsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSB0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgIGJveFNoYWRvdzogdGhpcy5pbml0aWFsU3R5bGUgJiYgdGhpcy5pbml0aWFsU3R5bGUuYm94U2hhZG93LFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwcHgnXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUcmFuc2l0aW9uU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0Q29sbGFwc2VkU3R5bGUoKSxcbiAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEV4cGFuZGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0VHJhbnNpdGlvblN0eWxlKCksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApIHRyYW5zbGF0ZVkoLTUwJSknLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGJvcmRlclJhZGl1czogMFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYW5pbWF0ZSgpIHtcbiAgICB0aGlzLmRlc3Ryb3lBbmltYXRpb24oKTtcbiAgICBpZiAodGhpcy5leHBhbmRlZCkge1xuICAgICAgdGhpcy5hbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgICAgLmJ1aWxkKFtcbiAgICAgICAgICBzdHlsZSh0aGlzLmdldENvbGxhcHNlZFN0eWxlKCkpLFxuICAgICAgICAgIGFuaW1hdGUoJzIwMG1zIGVhc2UnLCBzdHlsZSh0aGlzLmdldFRyYW5zaXRpb25TdHlsZSgpKSksXG4gICAgICAgICAgYW5pbWF0ZSgnMjAwbXMgZWFzZScsIHN0eWxlKHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpKSksXG4gICAgICAgIF0pXG4gICAgICAgIC5jcmVhdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpXG4gICAgICB0aGlzLmFuaW1hdGlvbi5vbkRvbmUoKCkgPT4gdGhpcy5hbmltYXRpb25Eb25lLmVtaXQoeyB0b1N0YXRlOiAnZXhwYW5kZWQnIH0pKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLnBsYXkoKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgIHRoaXMuYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25CdWlsZGVyXG4gICAgICAgIC5idWlsZChbXG4gICAgICAgICAgc3R5bGUodGhpcy5nZXRFeHBhbmRlZFN0eWxlKCkpLFxuICAgICAgICAgIGFuaW1hdGUoJzEwMG1zIGVhc2UnLCBzdHlsZSh0aGlzLmdldFRyYW5zaXRpb25TdHlsZSgpKSksXG4gICAgICAgICAgYW5pbWF0ZSgnMTAwbXMgZWFzZScsIHN0eWxlKHRoaXMuZ2V0Q29sbGFwc2VkU3R5bGUoKSkpLFxuICAgICAgICBdKVxuICAgICAgICAuY3JlYXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KVxuICAgICAgdGhpcy5hbmltYXRpb24ub25Eb25lKCgpID0+IHRoaXMuYW5pbWF0aW9uRG9uZS5lbWl0KHsgdG9TdGF0ZTogJ2NvbGxhcHNlZCcgfSkpO1xuICAgICAgdGhpcy5hbmltYXRpb24ucGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0U3R5bGUoKSB7XG4gICAgdGhpcy5kZXN0cm95QW5pbWF0aW9uKCk7XG4gICAgY29uc3QgYmFzZVN0eWxlID0gdGhpcy5leHBhbmRlZCA/IHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpIDogdGhpcy5nZXRDb2xsYXBzZWRTdHlsZSgpO1xuICAgIE9iamVjdC5rZXlzKGJhc2VTdHlsZSkuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgcHJvcGVydHksIGJhc2VTdHlsZVtwcm9wZXJ0eV0pXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveUFuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLmRlc3Ryb3koKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbjtcbiAgICB9XG4gIH1cblxufVxuIl19